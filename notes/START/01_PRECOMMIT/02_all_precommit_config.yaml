# Comprehensive .pre-commit-config.yaml for Python projects
# Note: This includes ALL available hooks - you should customize based on your needs
# Some hooks may conflict with each other (e.g., multiple formatters)

repos:
  # Built-in pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-docstring-first
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: requirements-txt-fixer
      - id: sort-simple-yaml
      - id: file-contents-sorter
      - id: fix-encoding-pragma
        args: ["--remove"]

  # Ruff - Fast Python linter and formatter (can replace many tools)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.13
    hooks:
      - id: ruff
        name: ruff-linter
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format
        name: ruff-formatter

  # Black - Code formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: ["--line-length=88"]

  # isort - Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Flake8 - Linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ["--max-line-length=88", "--extend-ignore=E203,W503"]

  # MyPy - Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
        args: [--ignore-missing-imports]

  # Pylint - Comprehensive linting
  - repo: https://github.com/pylint-dev/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        args: ["--disable=all", "--enable=unused-import"]

  # Bandit - Security linter
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "."]
        exclude: ^tests/

  # Safety - Dependency vulnerability checker
  - repo: https://github.com/lucas-c/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check

  # PyUpgrade - Upgrade Python syntax
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # Autoflake - Remove unused imports and variables
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.1
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # Unimport - Find and remove unused imports
  - repo: https://github.com/hakancelik96/unimport
    rev: 0.15.1
    hooks:
      - id: unimport
        args: [--remove-all, --ignore-init]

  # Add trailing comma
  - repo: https://github.com/asottile/add-trailing-comma
    rev: v3.1.0
    hooks:
      - id: add-trailing-comma
        args: [--py36-plus]

  # Reorder Python imports (alternative to isort)
  - repo: https://github.com/asottile/reorder_python_imports
    rev: v3.12.0
    hooks:
      - id: reorder-python-imports
        args: [--py38-plus, --add-import, "from __future__ import annotations"]

  # Absolufy imports - Convert relative to absolute imports
  - repo: https://github.com/MarcoGorelli/absolufy-imports
    rev: v0.3.1
    hooks:
      - id: absolufy-imports

  # YAPF - Google's Python formatter (alternative to Black)
  - repo: https://github.com/google/yapf
    rev: v0.40.2
    hooks:
      - id: yapf
        args: [--in-place, --parallel]

  # Autopep8 - PEP 8 formatter
  - repo: https://github.com/hhatto/autopep8
    rev: v2.0.4
    hooks:
      - id: autopep8
        args: [--in-place, --aggressive, --aggressive]

  # Pycodestyle - Style guide checker
  - repo: https://github.com/pycqa/pycodestyle
    rev: 2.11.1
    hooks:
      - id: pycodestyle
        args: [--max-line-length=88]

  # Pyflakes - Error checker
  - repo: https://github.com/pycqa/pyflakes
    rev: 3.2.0
    hooks:
      - id: pyflakes

  # Pydocstyle - Docstring checker
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]

  # Darglint - Docstring argument checker
  - repo: https://github.com/terrencepreilly/darglint
    rev: v1.8.1
    hooks:
      - id: darglint

  # Dead - Find dead code
  - repo: https://github.com/asottile/dead
    rev: v1.5.2
    hooks:
      - id: dead

  # Xenon - Code complexity monitor
  - repo: https://github.com/xenon-python/xenon
    rev: 0.9.1
    hooks:
      - id: xenon
        args: [--max-average=A, --max-modules=B, --max-absolute=B]

  # Django upgrade (if using Django)
  - repo: https://github.com/adamchainz/django-upgrade
    rev: 1.15.0
    hooks:
      - id: django-upgrade
        args: [--target-version, "4.2"]

  # Pyright - Microsoft's type checker (alternative to MyPy)
  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.350
    hooks:
      - id: pyright

  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]

  # commitizen - Commit message formatting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.13.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

# Configuration for specific tools
default_language_version:
  python: python3.8

# Exclude certain files/directories
exclude: |
  (?x)^(
      \.git/|
      \.venv/|
      venv/|
      env/|
      __pycache__/|
      \.pyc$|
      migrations/|
      node_modules/
  )$

# Fail fast - stop running hooks after first failure
fail_fast: false

# Minimum pre-commit version
minimum_pre_commit_version: "3.0.0"
