name: Multi-Python Docker Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        include:
          # Optional: Add specific test configurations
          - python-version: "3.11"
            is-default: true
          - python-version: "3.12"
            run-security-scan: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-py${{ matrix.python-version }}
          type=ref,event=pr,suffix=-py${{ matrix.python-version }}
          type=sha,suffix=-py${{ matrix.python-version }}
          type=raw,value=py${{ matrix.python-version }},enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image-py${{ matrix.python-version }}.tar

    - name: Load and test Docker image
      run: |
        docker load --input /tmp/image-py${{ matrix.python-version }}.tar

        # Get the first tag from the metadata output
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Test Python version
        echo "Testing Python version in container..."
        CONTAINER_PYTHON_VERSION=$(docker run --rm $IMAGE_TAG python -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        echo "Container Python version: $CONTAINER_PYTHON_VERSION"
        echo "Expected Python version: ${{ matrix.python-version }}"

        if [ "$CONTAINER_PYTHON_VERSION" != "${{ matrix.python-version }}" ]; then
          echo "❌ Python version mismatch!"
          exit 1
        fi
        echo "✅ Python version matches expected version"

        # Test container startup
        echo "Testing container startup..."
        CONTAINER_ID=$(docker run -d $IMAGE_TAG)
        sleep 5

        # Check if container is still running
        if [ "$(docker ps -q -f id=$CONTAINER_ID)" ]; then
          echo "✅ Container started successfully"
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
        else
          echo "❌ Container failed to start or exited"
          docker logs $CONTAINER_ID
          exit 1
        fi

    - name: Run security scan
      if: matrix.run-security-scan
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/image-py${{ matrix.python-version }}.tar
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      if: matrix.run-security-scan
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        build-args: |
          PYTHON_VERSION=${{ matrix.python-version }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Add your integration test commands here
        # For example, test with docker-compose, run API tests, etc.

    - name: Test multi-version compatibility
      run: |
        echo "Testing compatibility across Python versions..."
        # Example: Test that all versions can communicate
        # docker network create test-network
        # docker run -d --network test-network --name py39 ghcr.io/${{ github.repository }}:py3.9
        # docker run -d --network test-network --name py312 ghcr.io/${{ github.repository }}:py3.12
        # Run compatibility tests...
