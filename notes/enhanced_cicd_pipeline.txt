name: CI/CD Pipeline
'on':
  push:
    branches:
      - main

# Prevent duplicate runs for PR pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.12'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest
      - name: Create virtual environment
        run: uv venv
      - name: Install dependencies
        run: |
          uv pip install -e .
          uv pip install pytest pytest-cov pytest-xdist
      - name: Run tests with pytest
        run: |
          source .venv/bin/activate
          pytest --cov=attercop --cov-report=xml --cov-report=term-missing -v
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scans With Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest
      - name: Create virtual environment
        run: uv venv
      - name: Install dependencies
        run: |
          uv pip install -e .
          uv pip install bandit safety pip-audit
      - name: Run Bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r attercop/ -f json -o bandit-report.json || true
          bandit -r attercop/ -f txt
        continue-on-error: true
      - name: Run Safety check
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit
        continue-on-error: true
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: 'security-extended,security-and-quality'
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  scan:
    name: Check GitLeaks for Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  semantic_release:
    name: Get Next Version and Generate Release Notes
    needs: [test, security, codeql, scan]
    runs-on: ubuntu-latest

    outputs:
      next-version: ${{ steps.version.outputs.next-version }}
      current-version: ${{ steps.version.outputs.current-version }}
      has-changes: ${{ steps.version.outputs.has-changes }}
      release-notes: ${{ steps.version.outputs.release-notes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for semantic versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          pip install GitPython PyYAML

      - name: Parse CHANGELOG and Calculate Version
        id: version
        run: |
          python << 'EOF'
          import os
          import re
          import subprocess
          import yaml
          from git import Repo
          from datetime import datetime

          def parse_changelog():
              """Parse CHANGELOG.md and extract unreleased changes"""
              changelog_data = {
                  'added': [],
                  'changed': [],
                  'fixed': [],
                  'deprecated': [],
                  'removed': [],
                  'security': [],
                  'breaking': [],
                  'version_override': None,
                  'has_unreleased': False
              }

              try:
                  with open('CHANGELOG.md', 'r') as f:
                      content = f.read()

                  # Look for unreleased section
                  unreleased_match = re.search(r'## \[Unreleased\](.*?)(?=## \[|\Z)', content, re.DOTALL)
                  if not unreleased_match:
                      print("No [Unreleased] section found in CHANGELOG.md")
                      return changelog_data

                  unreleased_content = unreleased_match.group(1)
                  changelog_data['has_unreleased'] = True

                  # Check for version override
                  version_match = re.search(r'<!-- version:\s*([^\s]+)\s*-->', unreleased_content)
                  if version_match:
                      changelog_data['version_override'] = version_match.group(1)
                      print(f"Found version override: {changelog_data['version_override']}")

                  # Parse sections
                  sections = {
                      'added': r'### Added\s*\n(.*?)(?=###|\Z)',
                      'changed': r'### Changed\s*\n(.*?)(?=###|\Z)',
                      'fixed': r'### Fixed\s*\n(.*?)(?=###|\Z)',
                      'deprecated': r'### Deprecated\s*\n(.*?)(?=###|\Z)',
                      'removed': r'### Removed\s*\n(.*?)(?=###|\Z)',
                      'security': r'### Security\s*\n(.*?)(?=###|\Z)',
                      'breaking': r'### Breaking Changes?\s*\n(.*?)(?=###|\Z)'
                  }

                  for section, pattern in sections.items():
                      match = re.search(pattern, unreleased_content, re.DOTALL | re.IGNORECASE)
                      if match:
                          items_text = match.group(1).strip()
                          # Extract bullet points
                          items = re.findall(r'^[-*]\s+(.+)$', items_text, re.MULTILINE)
                          changelog_data[section] = [item.strip() for item in items if item.strip()]

                  print(f"Parsed changelog sections:")
                  for section, items in changelog_data.items():
                      if items and section != 'version_override':
                          print(f"  {section}: {len(items)} items")

              except FileNotFoundError:
                  print("CHANGELOG.md not found, will use commit-based versioning")
              except Exception as e:
                  print(f"Error parsing CHANGELOG.md: {e}")

              return changelog_data

          def get_current_version():
              """Get the current version from git tags"""
              try:
                  result = subprocess.run(['git', 'describe', '--tags', '--abbrev=0'],
                                        capture_output=True, text=True, check=True)
                  return result.stdout.strip()
              except subprocess.CalledProcessError:
                  return "v0.0.0"

          def parse_version(version_str):
              """Parse version string into components"""
              clean_version = version_str.lstrip('v')
              parts = clean_version.split('.')
              return {
                  'major': int(parts[0]) if len(parts) > 0 else 0,
                  'minor': int(parts[1]) if len(parts) > 1 else 0,
                  'patch': int(parts[2]) if len(parts) > 2 else 0
              }

          def analyze_commits_since_tag(repo, last_tag):
              """Analyze commits since last tag to determine version bump"""
              try:
                  if last_tag == "v0.0.0":
                      commits = list(repo.iter_commits())
                  else:
                      commits = list(repo.iter_commits(f'{last_tag}..HEAD'))
              except:
                  commits = list(repo.iter_commits())

              has_breaking = False
              has_feature = False
              has_fix = False
              commit_changes = {'added': [], 'changed': [], 'fixed': [], 'breaking': []}

              for commit in commits:
                  message = commit.message.strip()
                  first_line = message.split('\n')[0]

                  # Check for breaking changes
                  if ('breaking change' in message.lower() or
                      first_line.lower().startswith('feat!:') or
                      first_line.lower().startswith('fix!:') or
                      '!' in first_line.split(':')[0] if ':' in first_line else False):
                      has_breaking = True
                      commit_changes['breaking'].append(first_line)

                  # Check for features
                  elif first_line.lower().startswith('feat:'):
                      has_feature = True
                      commit_changes['added'].append(first_line[5:].strip())

                  # Check for fixes
                  elif first_line.lower().startswith('fix:'):
                      has_fix = True
                      commit_changes['fixed'].append(first_line[4:].strip())
                  else:
                      commit_changes['changed'].append(first_line)

              return has_breaking, has_feature, has_fix, commit_changes

          def determine_version_bump(changelog_data, has_breaking_commits, has_feature_commits, has_fix_commits):
              """Determine version bump based on changelog and commits"""

              # Check changelog for breaking changes first
              if changelog_data['breaking'] or changelog_data['removed']:
                  return 'major'

              # Check commits for breaking changes
              if has_breaking_commits:
                  return 'major'

              # Check changelog for new features
              if changelog_data['added'] or changelog_data['deprecated']:
                  return 'minor'

              # Check commits for new features
              if has_feature_commits:
                  return 'minor'

              # Check changelog for fixes/changes
              if changelog_data['fixed'] or changelog_data['changed'] or changelog_data['security']:
                  return 'patch'

              # Check commits for fixes
              if has_fix_commits:
                  return 'patch'

              return None

          def calculate_next_version(current_version, version_bump, version_override=None):
              """Calculate next version"""
              if version_override:
                  # Ensure version override has 'v' prefix if current version has it
                  if current_version.startswith('v') and not version_override.startswith('v'):
                      return f"v{version_override}"
                  return version_override

              if not version_bump:
                  return current_version

              version = parse_version(current_version)

              if version_bump == 'major':
                  version['major'] += 1
                  version['minor'] = 0
                  version['patch'] = 0
              elif version_bump == 'minor':
                  version['minor'] += 1
                  version['patch'] = 0
              elif version_bump == 'patch':
                  version['patch'] += 1

              prefix = 'v' if current_version.startswith('v') else ''
              return f"{prefix}{version['major']}.{version['minor']}.{version['patch']}"

          def generate_release_notes(changelog_data, commit_changes, version, current_version):
              """Generate comprehensive release notes"""
              notes = f"# Release {version}\n\n"

              # Combine changelog and commit data
              all_changes = {
                  'breaking': changelog_data['breaking'] + commit_changes.get('breaking', []),
                  'added': changelog_data['added'] + commit_changes.get('added', []),
                  'changed': changelog_data['changed'] + commit_changes.get('changed', []),
                  'fixed': changelog_data['fixed'] + commit_changes.get('fixed', []),
                  'deprecated': changelog_data['deprecated'],
                  'removed': changelog_data['removed'],
                  'security': changelog_data['security']
              }

              # Remove duplicates while preserving order
              for key in all_changes:
                  seen = set()
                  all_changes[key] = [x for x in all_changes[key] if not (x in seen or seen.add(x))]

              if all_changes['breaking']:
                  notes += "## 💥 Breaking Changes\n"
                  for item in all_changes['breaking']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['added']:
                  notes += "## ✨ New Features\n"
                  for item in all_changes['added']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['changed']:
                  notes += "## 🔄 Changes\n"
                  for item in all_changes['changed']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['fixed']:
                  notes += "## 🐛 Bug Fixes\n"
                  for item in all_changes['fixed']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['deprecated']:
                  notes += "## ⚠️ Deprecated\n"
                  for item in all_changes['deprecated']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['removed']:
                  notes += "## 🗑️ Removed\n"
                  for item in all_changes['removed']:
                      notes += f"- {item}\n"
                  notes += "\n"

              if all_changes['security']:
                  notes += "## 🔒 Security\n"
                  for item in all_changes['security']:
                      notes += f"- {item}\n"
                  notes += "\n"

              notes += f"**Full Changelog**: https://github.com/${{ github.repository }}/compare/{current_version}...{version}\n"

              return notes

          # Main execution
          try:
              # Parse changelog
              changelog_data = parse_changelog()

              # Get current version and analyze commits
              repo = Repo('.')
              current_version = get_current_version()

              print(f"Current version: {current_version}")

              # Analyze commits since last tag
              has_breaking_commits, has_feature_commits, has_fix_commits, commit_changes = analyze_commits_since_tag(repo, current_version)

              print(f"Commit analysis:")
              print(f"  Breaking changes: {has_breaking_commits}")
              print(f"  New features: {has_feature_commits}")
              print(f"  Bug fixes: {has_fix_commits}")

              # Determine version bump
              version_bump = determine_version_bump(changelog_data, has_breaking_commits, has_feature_commits, has_fix_commits)

              print(f"Version bump needed: {version_bump}")

              # Calculate next version
              next_version = calculate_next_version(current_version, version_bump, changelog_data['version_override'])

              print(f"Next version: {next_version}")

              # Check if we have any changes
              has_changes = (changelog_data['has_unreleased'] or
                           has_breaking_commits or has_feature_commits or has_fix_commits)

              # Generate release notes
              release_notes = ""
              if next_version != current_version:
                  release_notes = generate_release_notes(changelog_data, commit_changes, next_version, current_version)

              # Set GitHub outputs
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"current-version={current_version}\n")
                  f.write(f"next-version={next_version}\n")
                  f.write(f"has-changes={'true' if has_changes else 'false'}\n")
                  # Escape newlines for GitHub Actions
                  escaped_notes = release_notes.replace('\n', '\\n').replace('\r', '\\r').replace('"', '\\"')
                  f.write(f"release-notes={escaped_notes}\n")

              print(f"\nRelease summary:")
              print(f"  Current: {current_version}")
              print(f"  Next: {next_version}")
              print(f"  Has changes: {has_changes}")
              print(f"  Will create release: {next_version != current_version}")

          except Exception as e:
              print(f"Error in version calculation: {e}")
              import traceback
              traceback.print_exc()
              exit(1)
          EOF

      - name: Print version info
        run: |
          echo "Current version: ${{ steps.version.outputs.current-version }}"
          echo "Next version: ${{ steps.version.outputs.next-version }}"
          echo "Has changes: ${{ steps.version.outputs.has-changes }}"
          if [ "${{ steps.version.outputs.current-version }}" != "${{ steps.version.outputs.next-version }}" ]; then
            echo "✅ Version will be bumped!"
          else
            echo "ℹ️ No version bump needed"
          fi

  create_release:
    name: Create GitHub Release
    needs: [semantic_release]
    runs-on: ubuntu-latest

    # Only run if there's a new version to release
    if: needs.semantic_release.outputs.next-version != needs.semantic_release.outputs.current-version

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Update CHANGELOG.md
        env:
          NEXT_VERSION: ${{ needs.semantic_release.outputs.next-version }}
          CURRENT_VERSION: ${{ needs.semantic_release.outputs.current-version }}
        run: |
          python << 'EOF'
          import os
          import re
          from datetime import datetime

          def update_changelog(version):
              """Update CHANGELOG.md by moving Unreleased to versioned section"""
              try:
                  with open('CHANGELOG.md', 'r') as f:
                      content = f.read()

                  # Get today's date
                  today = datetime.now().strftime('%Y-%m-%d')

                  # Replace [Unreleased] with [version] - date
                  clean_version = version.lstrip('v')
                  updated_content = re.sub(
                      r'## \[Unreleased\]',
                      f'## [Unreleased]\n\n## [{clean_version}] - {today}',
                      content,
                      count=1
                  )

                  # Write back to file
                  with open('CHANGELOG.md', 'w') as f:
                      f.write(updated_content)

                  print(f"Updated CHANGELOG.md: moved Unreleased to [{clean_version}] - {today}")

              except Exception as e:
                  print(f"Error updating CHANGELOG.md: {e}")
                  # Don't fail the release if changelog update fails

          version = os.environ['NEXT_VERSION']
          update_changelog(version)
          EOF

      - name: Create Git Tag
        env:
          NEXT_VERSION: ${{ needs.semantic_release.outputs.next-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Commit changelog update if it was modified
          if [ -n "$(git status --porcelain CHANGELOG.md)" ]; then
            git add CHANGELOG.md
            git commit -m "chore: update CHANGELOG.md for release $NEXT_VERSION"
          fi

          git tag -a "$NEXT_VERSION" -m "Release $NEXT_VERSION"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
          git push origin HEAD:"${{ github.ref_name }}"
          git push origin "$NEXT_VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.semantic_release.outputs.next-version }}
          name: Release ${{ needs.semantic_release.outputs.next-version }}
          body: ${{ needs.semantic_release.outputs.release-notes }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (Optional)
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.semantic_release.outputs.next-version }}
          files: ./dist/*
        if: false  # Change to true if you want to upload artifacts
