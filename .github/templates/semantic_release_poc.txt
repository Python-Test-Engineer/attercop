# Pre-commit + Conventional Commits + Python Semantic Release POC

A complete proof of concept repository demonstrating automated code quality, conventional commits, and semantic versioning.

## Repository Structure

```
semantic-release-poc/
├── .pre-commit-config.yaml          # Pre-commit hook configuration
├── .github/
│   └── workflows/
│       └── release.yml              # GitHub Actions for automated releases
├── pyproject.toml                   # Project configuration with dependencies
├── uv.lock                          # UV lock file (auto-generated)
├── src/
│   └── calculator/
│       ├── __init__.py
│       └── calculator.py            # Example Python module
├── tests/
│   └── test_calculator.py           # Example tests
├── CHANGELOG.md                     # Auto-generated changelog
├── README.md                        # This file
└── .gitignore                       # Git ignore patterns

```

## Files

### `.pre-commit-config.yaml`
```yaml
repos:
  # Basic pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-merge-conflict
      - id: debug-statements

  # Python code formatting with black
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Python linting with flake8
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203]

  # Conventional commit message validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.1.1
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
```

### `pyproject.toml`
```toml
[project]
name = "calculator-poc"
dynamic = ["version"]
description = "A simple calculator POC for semantic release demo"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/calculator/_version.py"

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["src/calculator/__init__.py:__version__"]
build_command = "uv build"
commit_message = "chore(release): {version} [skip ci]"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"

[tool.semantic_release.remote]
name = "origin"
type = "github"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
```

### `uv.lock` (auto-generated)
```txt
# This file is automatically generated by uv
# To regenerate, run: uv lock
```

### `pyproject.toml` (dependencies section)
```toml
[project]
dependencies = [
    # Main project dependencies (none for this simple example)
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
    "python-semantic-release>=7.33.0",
]
```

### `src/calculator/__init__.py`
```python
"""A simple calculator module for demonstration."""

__version__ = "0.1.0"

from .calculator import Calculator

__all__ = ["Calculator"]
```

### `src/calculator/calculator.py`
```python
"""Simple calculator implementation."""


class Calculator:
    """A basic calculator class."""

    def add(self, a: float, b: float) -> float:
        """Add two numbers.

        Args:
            a: First number
            b: Second number

        Returns:
            Sum of a and b
        """
        return a + b

    def subtract(self, a: float, b: float) -> float:
        """Subtract two numbers.

        Args:
            a: First number
            b: Second number

        Returns:
            Difference of a and b
        """
        return a - b

    def multiply(self, a: float, b: float) -> float:
        """Multiply two numbers.

        Args:
            a: First number
            b: Second number

        Returns:
            Product of a and b
        """
        return a * b

    def divide(self, a: float, b: float) -> float:
        """Divide two numbers.

        Args:
            a: First number
            b: Second number

        Returns:
            Quotient of a and b

        Raises:
            ValueError: If b is zero
        """
        if b == 0:
            raise ValueError("Cannot divide by zero")
        return a / b
```

### `tests/test_calculator.py`
```python
"""Tests for the calculator module."""

import pytest
from calculator import Calculator


class TestCalculator:
    """Test cases for Calculator class."""

    def setup_method(self):
        """Set up test fixtures."""
        self.calc = Calculator()

    def test_add(self):
        """Test addition functionality."""
        assert self.calc.add(2, 3) == 5
        assert self.calc.add(-1, 1) == 0
        assert self.calc.add(0.1, 0.2) == pytest.approx(0.3)

    def test_subtract(self):
        """Test subtraction functionality."""
        assert self.calc.subtract(5, 3) == 2
        assert self.calc.subtract(1, 1) == 0
        assert self.calc.subtract(-1, -1) == 0

    def test_multiply(self):
        """Test multiplication functionality."""
        assert self.calc.multiply(2, 3) == 6
        assert self.calc.multiply(-2, 3) == -6
        assert self.calc.multiply(0, 5) == 0

    def test_divide(self):
        """Test division functionality."""
        assert self.calc.divide(6, 2) == 3
        assert self.calc.divide(1, 2) == 0.5
        assert self.calc.divide(-6, 2) == -3

    def test_divide_by_zero(self):
        """Test division by zero raises ValueError."""
        with pytest.raises(ValueError, match="Cannot divide by zero"):
            self.calc.divide(5, 0)
```

### `.github/workflows/release.yml`
```yaml
name: Release

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv sync --dev

    - name: Run tests
      run: uv run pytest

    - name: Run linting
      run: |
        uv run black --check src tests
        uv run isort --check-only src tests
        uv run flake8 src tests

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        uv add --dev python-semantic-release

    - name: Semantic Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        uv run semantic-release publish
```

### `.gitignore`
```gitignore
# UV-specific files
.python-version

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Virtual environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
```

## Setup Instructions

1. **Install uv (if not already installed):**
   ```bash
   curl -LsSf https://astral.sh/uv/install.sh | sh
   ```

2. **Initialize the repository:**
   ```bash
   git init
   uv init --package
   # Copy the files from this POC into your project
   ```

3. **Install dependencies:**
   ```bash
   uv sync --dev
   ```

4. **Install pre-commit hooks:**
   ```bash
   uv run pre-commit install
   uv run pre-commit install --hook-type commit-msg
   ```

5. **Run tests:**
   ```bash
   uv run pytest
   ```

6. **Add new dependencies:**
   ```bash
   # Add runtime dependency
   uv add some-package

   # Add development dependency
   uv add --dev some-dev-package
   ```

## Conventional Commit Examples

The repository is configured to enforce conventional commit messages. Here are examples:

### Features (Minor version bump)
```bash
git commit -m "feat: add multiplication function to calculator"
git commit -m "feat(calculator): implement division with zero check"
```

### Bug Fixes (Patch version bump)
```bash
git commit -m "fix: handle floating point precision in addition"
git commit -m "fix(tests): correct assertion for division test"
```

### Breaking Changes (Major version bump)
```bash
git commit -m "feat!: change calculator interface to use kwargs"
git commit -m "feat(calculator)!: remove deprecated subtract_old method

BREAKING CHANGE: The subtract_old method has been removed. Use subtract instead."
```

### Other Types (No version bump)
```bash
git commit -m "docs: update README with usage examples"
git commit -m "style: format code with black"
git commit -m "test: add edge case tests for division"
git commit -m "chore: update development dependencies"
git commit -m "ci: add Python 3.11 to test matrix"
git commit -m "refactor: simplify error handling in divide method"
```

## How It Works

1. **Pre-commit hooks** run automatically before each commit to:
   - Format code with Black
   - Sort imports with isort
   - Lint code with flake8
   - Validate commit message format
   - Check for common issues

2. **Conventional commits** are enforced to ensure:
   - Consistent commit message format
   - Automatic changelog generation
   - Semantic version determination

3. **Python-semantic-release** automatically:
   - Analyzes commit messages since last release
   - Determines next version number (major/minor/patch)
   - Generates changelog
   - Creates git tags
   - Publishes releases

## Example Workflow

1. Make changes to code
2. Run tests: `uv run pytest`
3. Run linting: `uv run black src tests && uv run isort src tests`
4. Commit with conventional format: `git commit -m "feat: add new calculator method"`
5. Push to main branch
6. GitHub Actions automatically creates a new release with proper versioning

## UV Commands Reference

- `uv sync` - Install all dependencies from lock file
- `uv sync --dev` - Install including development dependencies
- `uv add package-name` - Add a runtime dependency
- `uv add --dev package-name` - Add a development dependency
- `uv run command` - Run a command in the project environment
- `uv build` - Build the package for distribution
- `uv publish` - Publish package to PyPI

This setup ensures code quality, consistent versioning, and automated releases based on commit message semantics, all powered by uv's fast dependency management.
