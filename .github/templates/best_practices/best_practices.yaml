name: Security & Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-and-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Create virtual environment
      run: uv venv

    - name: Install dependencies
      run: |
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    # CODE FORMATTING AND LINTING
    - name: Check code formatting with Black
      run: |
        uv run black --check --diff .

    - name: Check import sorting with isort
      run: |
        uv run isort --check-only --diff .

    - name: Lint with Ruff
      run: |
        uv run ruff check . --output-format=github

    - name: Type checking with MyPy
      run: |
        uv run mypy . --install-types --non-interactive

    # SECURITY SCANNING
    - name: Security scan with Bandit
      run: |
        uv run bandit -r . -f json -o bandit-report.json || true
        uv run bandit -r . -f txt

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results-${{ matrix.python-version }}
        path: bandit-report.json

    - name: Dependency security scan with Safety
      run: |
        uv run safety check --json --output safety-report.json || true
        uv run safety check

    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results-${{ matrix.python-version }}
        path: safety-report.json

    - name: Audit dependencies with pip-audit
      run: |
        uv run pip-audit --format=json --output=pip-audit-report.json || true
        uv run pip-audit

    - name: Upload pip-audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: pip-audit-results-${{ matrix.python-version }}
        path: pip-audit-report.json

    # SECRET SCANNING
    - name: Scan for secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    # TESTING
    - name: Run tests with pytest
      run: |
        uv run pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --junitxml=pytest-results.xml -v

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # DOCUMENTATION
    - name: Check documentation build
      run: |
        if [ -f "docs/requirements.txt" ]; then
          uv pip install -r docs/requirements.txt
          uv run sphinx-build -b html docs docs/_build/html -W
        fi

  # CODEQL SECURITY ANALYSIS
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # DOCKER SECURITY SCAN (if Dockerfile exists)
  docker-security:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'docker') || github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if Dockerfile exists
      id: check-dockerfile
      run: |
        if [ -f "Dockerfile" ]; then
          echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker image
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      run: docker build -t security-scan-image .

    - name: Run Trivy vulnerability scanner
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'security-scan-image'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # DEPENDENCY REVIEW
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # SECURITY REPORT GENERATION
  security-report:
    runs-on: ubuntu-latest
    needs: [security-and-quality, codeql-analysis]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "## Scan Date: $(date)" >> security-summary.md
        echo "## Repository: ${{ github.repository }}" >> security-summary.md
        echo "## Commit: ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md

        # Add artifact information
        echo "## Artifacts Generated:" >> security-summary.md
        ls -la */

        # Create a simple summary
        echo "- Bandit security scan completed" >> security-summary.md
        echo "- Safety dependency scan completed" >> security-summary.md
        echo "- pip-audit vulnerability scan completed" >> security-summary.md
        echo "- CodeQL analysis completed" >> security-summary.md
        echo "- Test coverage report generated" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md

  # NOTIFY ON SECURITY ISSUES
  notify-security:
    runs-on: ubuntu-latest
    needs: [security-and-quality, codeql-analysis]
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')

    steps:
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "Security scan failed in ${{ github.repository }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
