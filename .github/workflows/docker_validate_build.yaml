name: Calculator App CI/CD

on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]
  workflow_dispatch:
env:
  IMAGE_NAME: calculator-app
  REGISTRY: ghcr.io

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./src/calculator
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run container tests
      run: |
        # Get the first tag from the metadata output
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Start the container in background
        docker run -d --name calculator-test $IMAGE_TAG

        # Wait for container to be ready (adjust sleep time as needed)
        sleep 5

        # Run health check or basic functionality test
        docker exec calculator-test sh -c "echo 'Container is running'" || exit 1

        # If your app has a health endpoint, test it
        # docker exec calculator-test curl -f http://localhost:8080/health || exit 1

        # If your app has unit tests built in, run them
        # docker exec calculator-test npm test || exit 1

        # Clean up
        docker stop calculator-test
        docker rm calculator-test

    - name: Basic Security Scan - Check for known vulnerabilities
      run: |
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Check for common security issues using docker history
        echo "=== Checking Docker image layers ==="
        docker history $IMAGE_TAG

        # Check for secrets in environment variables
        echo "=== Checking for exposed secrets ==="
        docker inspect $IMAGE_TAG | jq '.[0].Config.Env[]?' | grep -i -E "(password|secret|key|token)" && echo "WARNING: Potential secrets found in environment" || echo "No obvious secrets in environment"

    - name: Basic Security Scan - File system check
      run: |
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Create temporary container to inspect filesystem
        CONTAINER_ID=$(docker create $IMAGE_TAG)

        # Check for common security issues
        echo "=== Checking for world-writable files ==="
        docker run --rm $IMAGE_TAG find / -type f -perm -002 2>/dev/null | head -10 || echo "No concerning world-writable files found"

        echo "=== Checking for SUID/SGID files ==="
        docker run --rm $IMAGE_TAG find / -type f \( -perm -4000 -o -perm -2000 \) 2>/dev/null | head -10 || echo "Standard SUID/SGID files found"

        echo "=== Checking running processes ==="
        docker run --rm $IMAGE_TAG ps aux 2>/dev/null || echo "Cannot check processes"

        # Clean up
        docker rm $CONTAINER_ID

    - name: Basic Security Scan - Network and user check
      run: |
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        # Check what user the container runs as
        echo "=== Checking container user ==="
        USER_INFO=$(docker run --rm $IMAGE_TAG whoami 2>/dev/null || echo "unknown")
        echo "Container runs as user: $USER_INFO"

        if [ "$USER_INFO" = "root" ]; then
          echo "WARNING: Container is running as root user"
        fi

        # Check for open ports
        echo "=== Checking exposed ports ==="
        docker inspect $IMAGE_TAG | jq '.[0].Config.ExposedPorts // {}' | jq 'keys[]?' || echo "No exposed ports configured"

    - name: Generate security report
      run: |
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

        echo "# Security Scan Report" > security-report.md
        echo "**Image:** $IMAGE_TAG" >> security-report.md
        echo "**Scan Date:** $(date)" >> security-report.md
        echo "" >> security-report.md

        # Add basic image info
        echo "## Image Information" >> security-report.md
        docker inspect $IMAGE_TAG | jq '.[0] | {Created, Architecture, Os, Size}' >> security-report.md

        echo "" >> security-report.md
        echo "## Basic Security Checks Completed" >> security-report.md
        echo "- [x] Layer inspection" >> security-report.md
        echo "- [x] Environment variable check" >> security-report.md
        echo "- [x] File permission check" >> security-report.md
        echo "- [x] User privilege check" >> security-report.md
        echo "- [x] Port exposure check" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

    - name: Push image (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: docker/build-push-action@v5
      with:
        context: ./src/calculator
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Clean up local images
      if: always()
      run: |
        # Clean up to save runner space
        docker image prune -f
        docker builder prune -f
