name: CI/CD Pipeline
'on':
  push:
    branches:
      - main


# Prevent duplicate runs for PR pushes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.12'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v4
        with:
          python-version: '${{ matrix.python-version }}'
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest
      - name: Create virtual environment
        run: uv venv
      - name: Install dependencies
        run: |
          uv pip install -e .
          uv pip install pytest pytest-cov pytest-xdist
      - name: Run tests with pytest
        run: |
          source .venv/bin/activate
          pytest --cov=attercop --cov-report=xml --cov-report=term-missing -v
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  security:
    name: Security Scans With Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest
      - name: Create virtual environment
        run: uv venv
      - name: Install dependencies
        run: |
          uv pip install -e .
          uv pip install bandit safety pip-audit
      - name: Run Bandit security scan
        run: |
          source .venv/bin/activate
          bandit -r attercop/ -f json -o bandit-report.json || true
          bandit -r attercop/ -f txt
        continue-on-error: true
      - name: Run Safety check
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json || true
          safety check
        continue-on-error: true
      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit
        continue-on-error: true
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json
  # codeql:
  #   name: CodeQL Analysis
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read
  #     contents: read
  #     security-events: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: python
  #         queries: 'security-extended,security-and-quality'
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3

  scan:
    name: Check GitLeaks for Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  semantic_release:

    if: github.ref == 'refs/heads/main'
    name: Get Next Version
    # needs: [test, security, codeql, scan]
    needs: [test, security, scan]
    runs-on: ubuntu-latest

    outputs:
      next-version: ${{ steps.version.outputs.next-version }}
      current-version: ${{ steps.version.outputs.current-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for semantic versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/git

      - name: Get current and next version
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Getting current version..."
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

          echo "Calculating next version..."
          # Create basic semantic-release config if it doesn't exist
          if [ ! -f ".releaserc" ] && [ ! -f ".releaserc.json" ] && [ ! -f "release.config.js" ]; then
            echo '{
              "branches": ["main", "master"],
              "plugins": [
                "@semantic-release/commit-analyzer",
                "@semantic-release/release-notes-generator"
              ]
            }' > .releaserc.json
          fi

          # Run semantic-release in dry-run mode and capture full output
          echo "Running semantic-release dry-run..."
          SEMANTIC_OUTPUT=$(npx semantic-release --dry-run 2>&1)
          echo "Semantic-release output:"
          echo "$SEMANTIC_OUTPUT"

          # Try multiple patterns to extract version
          NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oE "next release version is [v]?[0-9]+\.[0-9]+\.[0-9]+" | sed 's/next release version is //' | head -1)
          if [ -z "$NEXT_VERSION" ]; then
            NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oE "Published release [v]?[0-9]+\.[0-9]+\.[0-9]+" | sed 's/Published release //' | head -1)
          fi
          if [ -z "$NEXT_VERSION" ]; then
            NEXT_VERSION=$(echo "$SEMANTIC_OUTPUT" | grep -oE "[v]?[0-9]+\.[0-9]+\.[0-9]+" | head -1)
          fi

          # Check if semantic-release found changes
          if echo "$SEMANTIC_OUTPUT" | grep -q "no new version"; then
            echo "No new version needed, using current version"
            NEXT_VERSION=$CURRENT_VERSION
          elif [ -z "$NEXT_VERSION" ]; then
            echo "Could not determine next version, using current version"
            NEXT_VERSION=$CURRENT_VERSION
          else
            # Ensure version has 'v' prefix if current version has it
            if [[ $CURRENT_VERSION == v* ]] && [[ $NEXT_VERSION != v* ]]; then
              NEXT_VERSION="v$NEXT_VERSION"
            fi
          fi

          echo "next-version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version: $NEXT_VERSION"

      - name: Print version info
        run: |
          echo "Current version: ${{ steps.version.outputs.current-version }}"
          echo "Next version: ${{ steps.version.outputs.next-version }}"
