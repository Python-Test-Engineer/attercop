# Complete Security and Quality Workflow for Calculator Application
# This workflow is specifically designed to work with the calculator app's docker-compose setup
# It demonstrates how to integrate security scanning with your actual development workflow
name: Calculator Security Pipeline

# Comprehensive trigger strategy to catch security issues at multiple stages
on:
#   # Protect your main branch by scanning every push
#   push:
#     branches: [ main, master ]
#   # Prevent vulnerable code from being merged through PR scanning
#   pull_request:
#     branches: [ main, master ]
#   # Enable manual security audits when needed
  workflow_dispatch:


# Security-first permissions following principle of least privilege
# Each permission serves a specific purpose in our security pipeline
permissions:
  contents: read          # Read repository code and configuration
  security-events: write  # Upload security scan results to GitHub Security tab
  pull-requests: write    # Comment on PRs with security findings
  checks: write          # Update PR status checks
  actions: read          # Access workflow run information

# Environment variables that apply to all jobs
# These help maintain consistency across different scanning tools
env:
  # Use the same Python version as your application for accurate dependency scanning
  PYTHON_VERSION: '3.11'
  # Docker image name that matches your docker-compose setup
  IMAGE_NAME: calculator
  # Set consistent scan output directory
  SCAN_RESULTS_DIR: security-results

jobs:
  # Job 1: Application Setup and Validation
  # This job mirrors your docker-compose setup to ensure we're scanning the right thing
  application-setup:
    name: 🔧 Application Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      # Share information about the application structure with other jobs
      has-requirements: ${{ steps.check-deps.outputs.has-requirements }}
      has-dockerfile: ${{ steps.check-deps.outputs.has-dockerfile }}
      python-version: ${{ steps.check-deps.outputs.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Analyze your project structure to understand dependencies and configuration
      # This helps us tailor the security scans to your specific setup
      - name: Analyze project structure
        id: check-deps
        run: |
          echo "Analyzing calculator application structure..."

          # Check for different types of dependency files
          if [ -f "requirements.txt" ]; then
            echo "has-requirements=requirements.txt" >> $GITHUB_OUTPUT
            echo "📦 Found requirements.txt"
          elif [ -f "pyproject.toml" ]; then
            echo "has-requirements=pyproject.toml" >> $GITHUB_OUTPUT
            echo "📦 Found pyproject.toml"
          else
            echo "has-requirements=none" >> $GITHUB_OUTPUT
            echo "⚠️ No dependency file found"
          fi

          # Verify Dockerfile exists (needed for container scanning)
          if [ -f "Dockerfile" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "🐳 Found Dockerfile"
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "❌ No Dockerfile found"
          fi

          # Extract Python version from various sources
          if [ -f "pyproject.toml" ] && grep -q "python" pyproject.toml; then
            python_version=$(grep -o 'python.*=.*"[^"]*"' pyproject.toml | grep -o '"[^"]*"' | tail -1 | tr -d '"' | grep -o '[0-9]\+\.[0-9]\+' | head -1)
            echo "python-version=${python_version:-3.11}" >> $GITHUB_OUTPUT
          else
            echo "python-version=3.11" >> $GITHUB_OUTPUT
          fi


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yaml
        run: |
          echo "Validating docker-compose.yaml..."
          # Check if docker-compose file is valid
          docker compose config > /tmp/compose-validated.yaml
          echo "✅ Docker Compose configuration is valid"
          # Display the services we'll be working with
          echo "📋 Services defined in docker-compose:"
          docker compose config --services
          # Check if our main calculator service is properly defined
          if docker compose config --services | grep -q "calculator"; then
              echo "✅ Calculator service found"
          else
              echo "❌ Calculator service not found in docker-compose.yaml"
              exit 1
          fi
      # Validate that we can build your docker-compose setup
      # This ensures our security scans will work with your actual configuration
      - name: Validate docker-compose configuration
        run: |
          echo "Validating docker-compose.yaml..."

          # Check if docker-compose file is valid
          docker-compose config > /tmp/compose-validated.yaml
          echo "✅ Docker Compose configuration is valid"

          # Display the services we'll be working with
          echo "📋 Services defined in docker-compose:"
          docker-compose config --services

          # Check if our main calculator service is properly defined
          if docker-compose config --services | grep -q "calculator"; then
            echo "✅ Calculator service found"
          else
            echo "❌ Calculator service not found in docker-compose.yaml"
            exit 1
          fi

  # Job 2: Comprehensive Secret Scanning
  # This scans not just your code, but also your docker-compose and any config files
  secret-scanning:
    name: 🔐 Secret & Credential Detection
    runs-on: ubuntu-latest
    needs: application-setup

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          # Scan entire git history for secrets that might have been committed and later removed
          fetch-depth: 0

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # TruffleHog is particularly good at finding secrets in configuration files
      # This is important because docker-compose files often contain environment variables
      - name: Advanced secret scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          # Focus on verified secrets to reduce false positives
          extra_args: >-
            --debug
            --only-verified
            --format sarif
            --output ${{ env.SCAN_RESULTS_DIR }}/trufflehog-results.sarif
            --config-path .trufflehog.yml
        continue-on-error: true

      # Create a custom TruffleHog configuration to scan docker-compose files specifically
      - name: Create TruffleHog configuration for Docker Compose
        run: |
          cat > .trufflehog.yml << 'EOF'
          # Custom TruffleHog configuration for calculator project
          detectors:
            - name: environment-variables
              keywords:
                - "AZURE_CLIENT_SECRET"
                - "AZURE_CLIENT_ID"
                - "DATABASE_PASSWORD"
                - "API_KEY"
                - "SECRET_KEY"
            - name: docker-secrets
              keywords:
                - "password"
                - "secret"
                - "token"
                - "key"
          EOF

      # GitLeaks provides complementary secret detection with different algorithms
      - name: Run GitLeaks secret scanner
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml
        continue-on-error: true

      # Create GitLeaks configuration tailored to your project structure
      - name: Create GitLeaks configuration
        run: |
          cat > .gitleaks.toml << 'EOF'
          # GitLeaks configuration for calculator application
          title = "Calculator App Secret Detection"

          [extend]
          useDefault = true

          [[rules]]
          description = "Docker Compose Environment Variables"
          id = "docker-compose-env"
          regex = '''(?i)(password|secret|key|token)\s*[:=]\s*[^\s\n]{8,}'''
          path = '''docker-compose\.ya?ml$'''

          [[rules]]
          description = "Python Configuration Files"
          id = "python-config"
          regex = '''(?i)(api_key|secret_key|password)\s*=\s*['""][^'"]{8,}['"]'''
          path = '''\.py$'''
          EOF

      - name: Upload secret scanning results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SCAN_RESULTS_DIR }}/trufflehog-results.sarif
          category: secret-scanning

  # Job 3: Application-Aware Dependency Scanning
  # This job uses your actual docker-compose setup to build and scan dependencies
  dependency-security:
    name: 📦 Dependency Vulnerability Analysis
    runs-on: ubuntu-latest
    needs: application-setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.application-setup.outputs.python-version }}

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # Build your application exactly as docker-compose would
      # This ensures we scan the actual dependencies your application uses
      - name: Install application dependencies
        run: |
          echo "Installing dependencies for calculator application..."

          # Mirror the approach from your docker-compose setup
          if [ -f "pyproject.toml" ]; then
            echo "Installing from pyproject.toml..."
            pip install -e .
          elif [ -f "requirements.txt" ]; then
            echo "Installing from requirements.txt..."
            pip install -r requirements.txt
          else
            echo "No dependency file found, installing common calculator dependencies..."
            pip install pytest
          fi

          # Generate a comprehensive requirements file for scanning
          pip freeze > ${{ env.SCAN_RESULTS_DIR }}/installed-packages.txt
          echo "📋 Installed packages saved for vulnerability scanning"

      # Use multiple dependency scanners for comprehensive coverage
      - name: Advanced dependency vulnerability scanning
        run: |
          echo "Running comprehensive dependency security analysis..."

          # Install security scanning tools
          pip install safety pip-audit

          # Safety scan - focuses on Python security database
          echo "🔍 Running Safety scan..."
          safety check --json --output ${{ env.SCAN_RESULTS_DIR }}/safety-report.json || true
          safety check --short-report || true

          # pip-audit - newer tool with additional vulnerability sources
          echo "🔍 Running pip-audit scan..."
          pip-audit --format=json --output=${{ env.SCAN_RESULTS_DIR }}/pip-audit-report.json || true
          pip-audit --desc || true

      # Snyk provides additional vulnerability intelligence and remediation advice
      - name: Snyk dependency scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >-
            --severity-threshold=medium
            --json-file-output=${{ env.SCAN_RESULTS_DIR }}/snyk-report.json
        continue-on-error: true

      # Create a dependency security summary
      - name: Generate dependency security summary
        run: |
          echo "📊 Generating dependency security summary..."

          cat > ${{ env.SCAN_RESULTS_DIR }}/dependency-summary.md << 'EOF'
          # 📦 Dependency Security Analysis Summary

          ## Overview
          This analysis covers all Python dependencies used by the calculator application.

          ## Scan Results
          EOF

          # Add results from each scanner
          if [ -f "${{ env.SCAN_RESULTS_DIR }}/safety-report.json" ]; then
            safety_issues=$(jq '.vulnerabilities | length' ${{ env.SCAN_RESULTS_DIR }}/safety-report.json 2>/dev/null || echo "0")
            echo "- **Safety Scanner**: $safety_issues vulnerabilities found" >> ${{ env.SCAN_RESULTS_DIR }}/dependency-summary.md
          fi

          if [ -f "${{ env.SCAN_RESULTS_DIR }}/pip-audit-report.json" ]; then
            audit_issues=$(jq '.vulnerabilities | length' ${{ env.SCAN_RESULTS_DIR }}/pip-audit-report.json 2>/dev/null || echo "0")
            echo "- **Pip-Audit Scanner**: $audit_issues vulnerabilities found" >> ${{ env.SCAN_RESULTS_DIR }}/dependency-summary.md
          fi

  # Job 4: Application-Specific Static Analysis
  # This analyzes your actual calculator source code for security issues
  static-security-analysis:
    name: 🔍 Static Code Security Analysis
    runs-on: ubuntu-latest
    needs: application-setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.application-setup.outputs.python-version }}

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # Install and configure security analysis tools
      - name: Install static analysis tools
        run: |
          pip install bandit[toml] semgrep pylint safety

          # Create Bandit configuration tailored to calculator application
          cat > .bandit << 'EOF'
          [bandit]
          # Bandit configuration for calculator application
          exclude_dirs = ['tests', 'venv', '.venv']
          skips = ['B101']  # Skip assert_used test since it's common in test files

          [bandit.assert_used]
          skips = ['*_test.py', 'test_*.py']
          EOF

      # Bandit specializes in finding Python security anti-patterns
      - name: Run Bandit security analysis
        run: |
          echo "🔍 Running Bandit security analysis on calculator source code..."

          # Scan the src directory structure matching your docker-compose setup
          if [ -d "src" ]; then
            echo "Scanning src/ directory..."
            bandit -r src/ -f json -o ${{ env.SCAN_RESULTS_DIR }}/bandit-report.json || true
            bandit -r src/ -f txt -o ${{ env.SCAN_RESULTS_DIR }}/bandit-report.txt || true
            echo "📋 Bandit analysis completed"
          else
            echo "No src/ directory found, scanning current directory..."
            bandit -r . -f json -o ${{ env.SCAN_RESULTS_DIR }}/bandit-report.json || true
          fi

      # Semgrep provides more sophisticated pattern matching for security issues
      - name: Run Semgrep security analysis
        run: |
          echo "🔍 Running Semgrep security analysis..."

          # Use Python-specific security rules plus general security patterns
          semgrep --config=p/python --config=p/security-audit \
                  --json --output=${{ env.SCAN_RESULTS_DIR }}/semgrep-report.json \
                  --verbose \
                  src/ || true

          echo "📋 Semgrep analysis completed"

      # CodeQL provides the most sophisticated analysis by building a queryable database of your code
      - name: Initialize CodeQL for calculator application
        uses: github/codeql-action/init@v3
        with:
          languages: python
          # Use comprehensive query suites for thorough analysis
          queries: >-
            security-extended,
            security-and-quality
          # Configure CodeQL for your specific source structure
          source-root: src

      # Build the application for CodeQL analysis
      - name: Build calculator application for CodeQL
        run: |
          echo "🔨 Building calculator application for CodeQL analysis..."

          # Install dependencies as they would be in docker-compose
          if [ -f "pyproject.toml" ]; then
            pip install -e .
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

          # Verify the calculator module can be imported
          python -c "import sys; sys.path.append('src'); import calculator.calculator; print('✅ Calculator module imported successfully')" || true

      - name: Perform CodeQL security analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "calculator-application"

  # Job 5: Docker and Container Security
  # This builds and scans your actual Docker setup from docker-compose
  container-security:
    name: 🐳 Container & Docker Security
    runs-on: ubuntu-latest
    needs: [application-setup]
    if: needs.application-setup.outputs.has-dockerfile == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # Build using docker-compose to ensure we test the exact same setup you use
      - name: Build calculator application with docker-compose
        run: |
          echo "🔨 Building calculator application using docker-compose..."

          # Build the calculator service exactly as defined in your docker-compose.yaml
          docker-compose build calculator

          # Tag the image for easier reference in subsequent steps
          docker tag $(docker-compose images -q calculator) ${{ env.IMAGE_NAME }}:security-scan

          echo "✅ Calculator application built successfully"

      # Comprehensive container vulnerability scanning with Trivy
      - name: Run Trivy container vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:security-scan'
          format: 'sarif'
          output: '${{ env.SCAN_RESULTS_DIR }}/trivy-results.sarif'
          scan-type: 'image'
          # Scan for multiple vulnerability types
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          exit-code: '0'  # Don't fail the build, just report

      # Scan for container configuration issues
      - name: Run Trivy configuration scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: '${{ env.SCAN_RESULTS_DIR }}/trivy-config-results.sarif'
          exit-code: '0'

      # Dockerfile security best practices analysis
      - name: Analyze Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: ${{ env.SCAN_RESULTS_DIR }}/hadolint-results.sarif
          no-fail: true

      # Docker Bench Security - comprehensive Docker security audit
      - name: Run Docker Bench Security
        run: |
          echo "🔍 Running Docker Bench Security audit..."

          # Clone and run Docker Bench Security
          git clone https://github.com/docker/docker-bench-security.git /tmp/docker-bench
          cd /tmp/docker-bench

          # Run the security benchmark
          sudo ./docker-bench-security.sh -l ${{ env.SCAN_RESULTS_DIR }}/docker-bench.log || true

          echo "📋 Docker Bench Security audit completed"

      # Upload all container security results
      - name: Upload container security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SCAN_RESULTS_DIR }}/trivy-results.sarif
          category: container-vulnerabilities

      - name: Upload Dockerfile security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SCAN_RESULTS_DIR }}/hadolint-results.sarif
          category: dockerfile-security

  # Job 6: Infrastructure and Configuration Security
  # This specifically analyzes your docker-compose.yaml and related configuration
  infrastructure-security:
    name: 🏗️ Infrastructure Configuration Security
    runs-on: ubuntu-latest
    needs: application-setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # Comprehensive infrastructure as code security scanning
      - name: Run Checkov IaC security analysis
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          # Focus on Docker and Docker Compose specific checks
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: ${{ env.SCAN_RESULTS_DIR }}/checkov-report.sarif
          soft_fail: true
          # Custom checks for common Docker Compose security issues
          check: >-
            CKV_DOCKER_1,CKV_DOCKER_2,CKV_DOCKER_3,
            CKV2_DOCKER_1,CKV2_DOCKER_2

      # Custom docker-compose security analysis
      - name: Analyze docker-compose security configuration
        run: |
          echo "🔍 Analyzing docker-compose.yaml security configuration..."

          # Create a custom security analysis of your docker-compose file
          python3 << 'EOF'
          import yaml
          import json

          # Load and analyze docker-compose.yaml
          with open('docker-compose.yaml', 'r') as f:
              compose_config = yaml.safe_load(f)

          security_issues = []
          recommendations = []

          # Check each service for security best practices
          services = compose_config.get('services', {})

          for service_name, service_config in services.items():
              print(f"🔍 Analyzing service: {service_name}")

              # Check for privileged mode
              if service_config.get('privileged'):
                  security_issues.append(f"Service '{service_name}' runs in privileged mode")

              # Check for root user
              user = service_config.get('user')
              if not user or user == 'root' or user == '0':
                  recommendations.append(f"Consider running service '{service_name}' as non-root user")

              # Check for host network mode
              if service_config.get('network_mode') == 'host':
                  security_issues.append(f"Service '{service_name}' uses host networking")

              # Check for volume mounts
              volumes = service_config.get('volumes', [])
              for volume in volumes:
                  if isinstance(volume, str) and ':' in volume and not volume.endswith(':ro'):
                      host_path = volume.split(':')[0]
                      if host_path in ['/', '/var/run/docker.sock', '/etc', '/usr']:
                          security_issues.append(f"Service '{service_name}' mounts sensitive host path: {host_path}")

              # Check environment variables for potential secrets
              env_vars = service_config.get('environment', [])
              if isinstance(env_vars, list):
                  for env_var in env_vars:
                      if any(keyword in env_var.lower() for keyword in ['password', 'secret', 'key', 'token']):
                          recommendations.append(f"Service '{service_name}' may contain secrets in environment variables")

          # Generate security report
          report = {
              'security_issues': security_issues,
              'recommendations': recommendations,
              'services_analyzed': list(services.keys())
          }

          with open('${{ env.SCAN_RESULTS_DIR }}/compose-security-analysis.json', 'w') as f:
              json.dump(report, f, indent=2)

          # Print summary
          print(f"\n📊 Docker Compose Security Analysis Summary:")
          print(f"   Services analyzed: {len(services)}")
          print(f"   Security issues found: {len(security_issues)}")
          print(f"   Recommendations: {len(recommendations)}")

          if security_issues:
              print("\n❌ Security Issues:")
              for issue in security_issues:
                  print(f"   - {issue}")

          if recommendations:
              print("\n💡 Recommendations:")
              for rec in recommendations:
                  print(f"   - {rec}")
          EOF

      - name: Upload infrastructure security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ env.SCAN_RESULTS_DIR }}/checkov-report.sarif
          category: infrastructure-security

  # Job 7: Application Testing with Security Focus
  # This runs your actual tests while looking for security-related test failures
  security-testing:
    name: 🧪 Security-Focused Application Testing
    runs-on: ubuntu-latest
    needs: application-setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.application-setup.outputs.python-version }}

      - name: Create results directory
        run: mkdir -p ${{ env.SCAN_RESULTS_DIR }}

      # Build and test using docker-compose to mirror your development environment
      - name: Build and test calculator application
        run: |
          echo "🧪 Running calculator application tests with security focus..."

          # Build the calculator service
          docker-compose build calculator

          # Run tests if test service exists, otherwise run basic validation
          if docker-compose config --services | grep -q "calculator_test"; then
            echo "Running calculator_test service..."
            docker-compose run --rm calculator_test
          else
            echo "No test service found, running basic application validation..."
            docker-compose run --rm calculator python -c "
            import sys
            sys.path.append('/app/src')
            try:
                import calculator.calculator as calc
                print('✅ Calculator module imported successfully')
                # Run basic functionality test
                result = calc.Calculator().add(2, 3)
                print(f'✅ Basic calculation test passed: 2 + 3 = {result}')
            except Exception as e:
                print(f'❌ Application validation failed: {e}')
                sys.exit(1)
            "
          fi

      # Security-focused input validation testing
      - name: Run security input validation tests
        run: |
          echo "🔒 Running security-focused input validation tests..."

          # Create and run security-specific tests
          cat > security_tests.py << 'EOF'
          import sys
          sys.path.append('src')

          def test_calculator_input_validation():
              """Test calculator handles malicious inputs safely"""
              try:
                  import calculator.calculator as calc
                  calculator = calc.Calculator()

                  # Test SQL injection patterns (if calculator uses any database operations)
                  malicious_inputs = [
                      "'; DROP TABLE users; --",
                      "1; exec('import os; os.system(\"rm -rf /\")')",
                      "eval('__import__(\"os\").system(\"whoami\")')",
                      "__import__('subprocess').call(['ls', '-la'])",
                      "1e308",  # Potential overflow
                      float('inf'),
                      float('-inf'),
                      float('nan')
                  ]

                  print("🔍 Testing malicious input handling...")
                  for malicious_input in malicious_inputs:
                      try:
                          # Test that malicious inputs are handled gracefully
                          if isinstance(malicious_input, str):
                              # Skip string inputs if calculator only accepts numbers
                              print(f"   Skipping string input: {malicious_input[:30]}...")
                              continue
                          else:
                              result = calculator.add(malicious_input, 1)
                              print(f"   Input {malicious_input}: {result}")
                      except (ValueError, TypeError, OverflowError) as e:
                          print(f"   ✅ Malicious input properly rejected: {str(e)[:50]}...")
                      except Exception as e:
                          print(f"   ⚠️  Unexpected error with input {malicious_input}: {e}")

                  print("✅ Input validation security tests completed")

              except ImportError:
                  print("⚠️  Calculator module not found, skipping security tests")
              except Exception as e:
                  print(f"❌ Security test failed: {e}")
                  return False

              return True

          if __name__ == "__main__":
              success = test_calculator_input_validation()
              sys.exit(0 if success else 1)
          EOF

          python security_tests.py

  # Job 8: Comprehensive Security Report Generation
  # This combines all security scan results into actionable reports
  security-report:
    name: 📊 Security Analysis Report
    runs-on: ubuntu-latest
    needs: [
      application-setup,
      secret-scanning,
      dependency-security,
      static-security-analysis,
      container-security,
      infrastructure-security,
      security-testing
    ]
    if: always()  # Run even if some security jobs failed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create comprehensive security report
        run: |
          echo "📊 Generating comprehensive security analysis report..."

          # Create detailed security report
          cat > security-report.md << 'EOF'
          # 🛡️ Calculator Application Security Analysis Report

          **Generated:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}

          ## Executive Summary

          This report provides a comprehensive security analysis of the Calculator application,
          including its source code, dependencies, Docker configuration, and infrastructure setup.

          ## Security Scan Results Overview

          | Security Area | Status | Details |
          |---------------|--------|---------|
          EOF

          # Add results from each security job
          if [[ "${{ needs.secret-scanning.result }}" == "success" ]]; then
            echo "| 🔐 Secret Detection | ✅ PASS | No secrets detected in code or configuration |" >> security-report.md
          else
            echo "| 🔐 Secret Detection | ❌ ISSUES | Potential secrets found - review Security tab |" >> security-report.md
          fi

          if [[ "${{ needs.dependency-security.result }}" == "success" ]]; then
            echo "| 📦 Dependency Security | ✅ PASS | No vulnerable dependencies identified |" >> security-report.md
          else
            echo "| 📦 Dependency Security | ⚠️ REVIEW | Vulnerable dependencies detected |" >> security-report.md
          fi

          if [[ "${{ needs.static-security-analysis.result }}" == "success" ]]; then
            echo "| 🔍 Static Code Analysis | ✅ PASS | No security issues in application code |" >> security-report.md
          else
            echo "| 🔍 Static Code Analysis | ⚠️ REVIEW | Potential security issues in code |" >> security-report.md
          fi

          if [[ "${{ needs.container-security.result }}" == "success" ]]; then
            echo "| 🐳 Container Security | ✅ PASS | Docker image and configuration secure |" >> security-report.md
          else
            echo "| 🐳 Container Security | ⚠️ REVIEW | Container vulner
