# Complete Security and Quality Workflow for Calculator Application
# This workflow is specifically designed to work with the calculator app's docker-compose setup
# It demonstrates how to integrate security scanning with your actual development workflow
name: Calculator Security Pipeline

# Comprehensive trigger strategy to catch security issues at multiple stages
on:
#   # Protect your main branch by scanning every push
#   push:
#     branches: [ main, master ]
#   # Prevent vulnerable code from being merged through PR scanning
#   pull_request:
#     branches: [ main, master ]
#   # Enable manual security audits when needed
  workflow_dispatch:


# Security-first permissions following principle of least privilege
# Each permission serves a specific purpose in our security pipeline
permissions:
  contents: read          # Read repository code and configuration
  security-events: write  # Upload security scan results to GitHub Security tab
  pull-requests: write    # Comment on PRs with security findings
  checks: write          # Update PR status checks
  actions: read          # Access workflow run information

# Environment variables that apply to all jobs
# These help maintain consistency across different scanning tools
env:
  # Use the same Python version as your application for accurate dependency scanning
  PYTHON_VERSION: '3.12'
  # Docker image name that matches your docker-compose setup
  IMAGE_NAME: calculator
  # Set consistent scan output directory
  SCAN_RESULTS_DIR: security-results

jobs:
  # Job 1: Application Setup and Validation
  # This job mirrors your docker-compose setup to ensure we're scanning the right thing
  application-setup:
    name: üîß Application Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      # Share information about the application structure with other jobs
      has-requirements: ${{ steps.check-deps.outputs.has-requirements }}
      has-dockerfile: ${{ steps.check-deps.outputs.has-dockerfile }}
      python-version: ${{ steps.check-deps.outputs.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Analyze your project structure to understand dependencies and configuration
      # This helps us tailor the security scans to your specific setup
      - name: Analyze project structure
        id: check-deps
        run: |
          echo "Analyzing calculator application structure..."

          # Check for different types of dependency files
          if [ -f "requirements.txt" ]; then
            echo "has-requirements=requirements.txt" >> $GITHUB_OUTPUT
            echo "üì¶ Found requirements.txt"
          elif [ -f "pyproject.toml" ]; then
            echo "has-requirements=pyproject.toml" >> $GITHUB_OUTPUT
            echo "üì¶ Found pyproject.toml"
          else
            echo "has-requirements=none" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No dependency file found"
          fi

          # Verify Dockerfile exists (needed for container scanning)
          if [ -f "Dockerfile" ]; then
            echo "has-dockerfile=true" >> $GITHUB_OUTPUT
            echo "üê≥ Found Dockerfile"
          else
            echo "has-dockerfile=false" >> $GITHUB_OUTPUT
            echo "‚ùå No Dockerfile found"
          fi

          # Extract Python version from various sources
          if [ -f "pyproject.toml" ] && grep -q "python" pyproject.toml; then
            python_version=$(grep -o 'python.*=.*"[^"]*"' pyproject.toml | grep -o '"[^"]*"' | tail -1 | tr -d '"' | grep -o '[0-9]\+\.[0-9]\+' | head -1)
            echo "python-version=${python_version:-3.11}" >> $GITHUB_OUTPUT
          else
            echo "python-version=3.11" >> $GITHUB_OUTPUT
          fi


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yaml
        run: |
          echo "Validating docker-compose.yaml..."
          # Check if docker-compose file is valid
          docker compose config > /tmp/compose-validated.yaml
          echo "‚úÖ Docker Compose configuration is valid"
          # Display the services we'll be working with
          echo "üìã Services defined in docker-compose:"
          docker compose config --services
          # Check if our main calculator service is properly defined
          if docker compose config --services | grep -q "calculator"; then
              echo "‚úÖ Calculator service found"
          else
              echo "‚ùå Calculator service not found in docker-compose.yaml"
              exit 1
          fi
  validate:
    runs-on: ubuntu-latest
    needs: application-setup
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate docker-compose.yaml
        run: |
          echo "Validating docker-compose.yaml..."
          # Check if docker-compose file is valid
          docker compose config > /tmp/compose-validated.yaml
          echo "‚úÖ Docker Compose configuration is valid"
          # Display the services we'll be working with
          echo "üìã Services defined in docker-compose:"
          docker compose config --services
          # Check if our main calculator service is properly defined
          if docker compose config --services | grep -q "calculator"; then
              echo "‚úÖ Calculator service found"
          else
              echo "‚ùå Calculator service not found in docker-compose.yaml"
              exit 1
          fi
